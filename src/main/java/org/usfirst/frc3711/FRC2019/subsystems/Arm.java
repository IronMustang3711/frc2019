// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3711.FRC2019.subsystems;


import com.ctre.phoenix.motorcontrol.ControlMode;

import org.usfirst.frc3711.FRC2019.TalonID;
import org.usfirst.frc3711.FRC2019.talon.TalonLiveWindowSupport;
import org.usfirst.frc3711.FRC2019.talon.TalonTelemetry;

import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.InstantCommand;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Arm extends TalonSubsystem {
public ShuffleboardTab tab;
NetworkTableEntry ntSetpoint;
NetworkTableEntry ntClosedLoopEnabled;

    public Arm() {
      super(Arm.class.getSimpleName(), TalonID.ARM.getId());
      tab = Shuffleboard.getTab(Arm.class.getSimpleName());
        Sendable s = new TalonTelemetry.MotorIOSendable(talon);
        addChild("Arm:motor io", s);
        Sendable s2 = new TalonTelemetry.SensorCollectionSendable(talon.getSensorCollection());
        addChild("Arm:sensor collection",s2);
      tab.add(s);
      tab.add(s2);

      //  addChild("ArmPID", new TalonLiveWindowSupport(talon));

      ntSetpoint = tab.add("setpoint", 0.0).getEntry();
      ntClosedLoopEnabled = tab.add("setpoint enabled",false).getEntry();
 
 
       tab.add(new Command("closed loop control"){
 
 
 
         @Override
         protected void execute() {
            if(ntClosedLoopEnabled.getBoolean(false)){
                talon.set(ControlMode.Position, ntSetpoint.getDouble(0.0));
            }
         }
 
         
       
           @Override
           protected boolean isFinished() {
               return false;
           }
       });
 
       tab.add(new InstantCommand("Reset Encoder"){
 
         @Override
         protected void execute() {
            talon.setSelectedSensorPosition(0);
            talon.getSensorCollection().setQuadraturePosition(0, 50);
 
         }
 
       });

    }

    @Override // Put code here to be run every loop
    public void initDefaultCommand() {

    }

    @Override
    void configureTalon() {
        super.configureTalon();
        talon.setInverted(true);

      
    }

    @Override
    public void periodic() {
        super.periodic();
            SmartDashboard.putNumber("Arm position", talon.getSensorCollection().getQuadraturePosition());
            SmartDashboard.putNumber("Arm position2", talon.getSelectedSensorPosition());
    }

}

