// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3711.FRC2019.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.RemoteSensorSource;
import com.ctre.phoenix.motorcontrol.can.TalonSRXConfiguration;

import org.usfirst.frc3711.FRC2019.TalonID;

import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.InstantCommand;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3711.FRC2019.talon.TalonTelemetry;

public class Wrist extends TalonSubsystem {
    ShuffleboardTab tab;

    NetworkTableEntry ntSetpoint;
NetworkTableEntry ntClosedLoopEnabled;

    public Wrist() {
        super(Wrist.class.getSimpleName(), TalonID.WRIST.getId());

        tab = Shuffleboard.getTab(Wrist.class.getSimpleName());
        Sendable s = new TalonTelemetry.MotorIOSendable(talon);
        addChild("Wrist:motor io", s);
        Sendable s2 = new TalonTelemetry.SensorCollectionSendable(talon.getSensorCollection());
        addChild("Wrist:sensor collection", s2);
        tab.add(s);
        tab.add(s2);

        ntSetpoint = tab.add("setpoint", 0.0).getEntry();
        ntClosedLoopEnabled = tab.add("setpoint enabled",false).getEntry();
   
   
         tab.add(new Command("closed loop control"){
            
            {requires(Wrist.this);}
   
   
           @Override
           protected void execute() {
              if(ntClosedLoopEnabled.getBoolean(false)){
                  talon.set(ControlMode.Position, ntSetpoint.getDouble(0.0));
              }
           }
   
           
         
             @Override
             protected boolean isFinished() {
                 return false;
             }
         });
   
         tab.add(new InstantCommand("Reset Encoder"){
   
            {requires(Wrist.this);}

           @Override
           protected void execute() {
              talon.setSelectedSensorPosition(0);
              talon.getSensorCollection().setQuadraturePosition(0, 50);
   
           }
   
         });
    }

    @Override
    void configureTalon() {
        super.configureTalon();
        talon.setInverted(true);
        talon.setSensorPhase(false);
        talon.selectProfileSlot(0, 0);
        talon.config_kP(0, 1.0);
        TalonSRXConfiguration config = new TalonSRXConfiguration();

        talon.getAllConfigs(config);

        {
            config.primaryPID.selectedFeedbackSensor = FeedbackDevice.SensorDifference;
            config.primaryPID.selectedFeedbackCoefficient = 2.0;

            //  config.auxiliaryPID.selectedFeedbackSensor = FeedbackDevice.PulseWidthEncodedPosition;
            // config.auxiliaryPID.selectedFeedbackCoefficient = 1.0;

            config.diff0Term = FeedbackDevice.QuadEncoder;
            config.diff1Term = FeedbackDevice.RemoteSensor0;
            //config.diff0Term = FeedbackDevice.RemoteSensor1;
            //config.diff1Term = FeedbackDevice.PulseWidthEncodedPosition;

            config.auxPIDPolarity = false;
            config.remoteFilter0.remoteSensorDeviceID = TalonID.ARM.getId();
            config.remoteFilter0.remoteSensorSource = RemoteSensorSource.TalonSRX_SelectedSensor;
            
            // config.remoteFilter1.remoteSensorDeviceID = 41;

        }

        talon.configAllSettings(config);

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());

        // addChild("WristPID", new TalonLiveWindowSupport(talon));
    }

    @Override
    public void periodic() {
        super.periodic();

        SmartDashboard.putNumber("Wrist position", talon.getSensorCollection().getQuadraturePosition());
        SmartDashboard.putNumber("Wrist position2", talon.getSelectedSensorPosition());

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
