package org.usfirst.frc3711.FRC2019.subsystems;

import com.ctre.phoenix.motorcontrol.Faults;
import com.ctre.phoenix.motorcontrol.InvertType;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import org.usfirst.frc3711.FRC2019.TalonID;
import org.usfirst.frc3711.FRC2019.commands.DrivewithJoystick;

import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Chassis extends Subsystem {


    private WPI_TalonSRX leftFront;
    private WPI_TalonSRX leftRear;

    private WPI_TalonSRX rightFront;
    private WPI_TalonSRX rightRear;

    private DifferentialDrive drive;
    public ShuffleboardTab tab;
    private NetworkTableEntry leftOutput, leftRearOutput, rightOutput,rightRearOutput;



    public Chassis() {
        leftFront = new WPI_TalonSRX(TalonID.LEFT_FRONT.getId());
        addChild("left front",leftFront);

        leftRear = new WPI_TalonSRX(TalonID.LEFT_REAR.getId());

        
        rightFront = new WPI_TalonSRX(TalonID.RIGHT_FRONT.getId());
        addChild("right front",rightFront);

        rightRear = new WPI_TalonSRX(TalonID.RIGHT_REAR.getId());
        

        
        
        drive = new DifferentialDrive(leftFront, rightFront);
        addChild("Drive",drive);

        drive.setSafetyEnabled(true);
        drive.setExpiration(0.1);
        drive.setMaxOutput(1.0);
        drive.setRightSideInverted(false);

        configureTalons();

        tab = Shuffleboard.getTab(Chassis.class.getSimpleName());
        leftOutput = tab.add("Left Output", 0.0).getEntry();
        leftRearOutput = tab.add("Left Rear Output",0.0).getEntry();
        rightOutput = tab.add("Right Output", 0.0).getEntry();
        rightRearOutput = tab.add("Right Rear Output",0.0).getEntry();
        tab.add(leftFront);
        tab.add(rightFront);
        tab.add(drive);
      //  tab.add(new DrivewithJoystick());

    }
    private void configureTalons(){
        rightFront.configFactoryDefault();
        rightRear.configFactoryDefault();
        leftFront.configFactoryDefault();
        leftRear.configFactoryDefault();

        rightRear.follow(rightFront);
        leftRear.follow(leftFront);

        rightFront.setInverted(true);
        leftFront.setInverted(false);

        rightRear.setInverted(InvertType.FollowMaster);
        leftRear.setInverted(InvertType.FollowMaster);

        rightFront.setSensorPhase(true);
        leftFront.setSensorPhase(true);

        
    }

    private void telemetry(){
        double leftPos = leftFront.getSelectedSensorPosition(0);
        double rightPos = rightFront.getSelectedSensorPosition(0);
        double leftVelocity = leftFront.getSelectedSensorVelocity(0);
        double rightVelocity = rightFront.getSelectedSensorVelocity(0);
        double leftOut = leftFront.getMotorOutputPercent();
        double leftRearOut = leftRear.getMotorOutputPercent();
        double rightOut = rightFront.getMotorOutputPercent();
        double rightRearOut = rightRear.getMotorOutputPercent();

        SmartDashboard.putNumber("Left Position", leftPos);
        SmartDashboard.putNumber("Right Position", rightPos);
        SmartDashboard.putNumber("Left Velocity", leftVelocity);
        SmartDashboard.putNumber("Right Velocity", rightVelocity);
        SmartDashboard.putNumber("Left Output", leftOut);
        SmartDashboard.putNumber("Left Rear Output",leftRearOut);
        SmartDashboard.putNumber("Right Output", rightOut);
        SmartDashboard.putNumber("Right Rear Output",rightRearOut);

        leftOutput.setDouble(leftOut);
        leftRearOutput.setDouble(leftRearOut);
        rightOutput.setDouble(rightOut);
        rightRearOutput.setDouble(rightRearOut);
        Faults leftFaults = new Faults();
        Faults rightFaults = new Faults();
        leftFront.getFaults(leftFaults);
        rightFront.getFaults(rightFaults);
        if(leftFaults.hasAnyFault()){
            DriverStation.reportWarning(leftFaults.toString(), false);
        }
        if(rightFaults.hasAnyFault()){
            DriverStation.reportWarning(rightFaults.toString(), false);
        }
    }

    public void drive(double forward, double turn){
        drive.arcadeDrive(forward, turn);
        SmartDashboard.putNumber("Drive Forward", forward);
        SmartDashboard.putNumber("Turn", turn);
    }

    @Override
    public void initDefaultCommand() {
        setDefaultCommand(new DrivewithJoystick());
    }

    @Override
    public void periodic() {
        telemetry();
    }

}

