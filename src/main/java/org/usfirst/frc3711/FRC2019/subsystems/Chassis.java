// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3711.FRC2019.subsystems;


import com.ctre.phoenix.motorcontrol.Faults;
import com.ctre.phoenix.motorcontrol.InvertType;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import org.usfirst.frc3711.FRC2019.TalonID;

import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX leftFront;
    private WPI_TalonSRX leftRear;
    private SpeedControllerGroup leftGroup;
    private WPI_TalonSRX rightFront;
    private WPI_TalonSRX rightRear;
    private SpeedControllerGroup rightGroup;
    private DifferentialDrive drive;
    public ShuffleboardTab tab;
    private NetworkTableEntry leftOutput, rightOutput;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Chassis() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftFront = new WPI_TalonSRX(TalonID.LEFT_FRONT.getId());
        
        
        
        leftRear = new WPI_TalonSRX(TalonID.LEFT_REAR.getId());
        
        
        
        leftGroup = new SpeedControllerGroup(leftFront, leftRear  );
        addChild("Left Group",leftGroup);
        
        
        rightFront = new WPI_TalonSRX(TalonID.RIGHT_FRONT.getId());
        
        
        
        rightRear = new WPI_TalonSRX(TalonID.RIGHT_REAR.getId());
        
        
        
        rightGroup = new SpeedControllerGroup(rightFront, rightRear  );
        addChild("Right Group",rightGroup);

        
        
        drive = new DifferentialDrive(leftGroup, rightGroup);
        addChild("Drive",drive);
        drive.setSafetyEnabled(true);
        drive.setExpiration(0.1);
        drive.setMaxOutput(1.0);
        drive.setRightSideInverted(false);

        configureTalons();

        tab = Shuffleboard.getTab(Chassis.class.getSimpleName());
        leftOutput = tab.add("Left Output", 0.0).getEntry();
        rightOutput = tab.add("Right Output", 0.0).getEntry();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    void configureTalons(){
        rightFront.configFactoryDefault();
        rightRear.configFactoryDefault();
        leftFront.configFactoryDefault();
        leftRear.configFactoryDefault();

        rightRear.follow(rightFront);
        leftRear.follow(leftFront);

        rightFront.setInverted(true);
        leftFront.setInverted(true);

        rightRear.setInverted(InvertType.FollowMaster);
        leftRear.setInverted(InvertType.FollowMaster);

        rightFront.setSensorPhase(true);
        leftFront.setSensorPhase(true);

        
    }

    public void telemetry(){
        double leftPos = leftFront.getSelectedSensorPosition(0);
        double rightPos = rightFront.getSelectedSensorPosition(0);
        double leftVelocity = leftFront.getSelectedSensorVelocity(0);
        double rightVelocity = rightFront.getSelectedSensorVelocity(0);
        double leftOut = leftFront.getMotorOutputPercent();
        double rightOut = rightFront.getMotorOutputPercent();
        SmartDashboard.putNumber("Left Position", leftPos);
        SmartDashboard.putNumber("Right Position", rightPos);
        SmartDashboard.putNumber("Left Velocity", leftVelocity);
        SmartDashboard.putNumber("Right Velocity", rightVelocity);
        SmartDashboard.putNumber("Left Output", leftOut);
        SmartDashboard.putNumber("Right Output", rightOut);
        leftOutput.setDouble(leftOut);
        rightOutput.setDouble(rightOut);
        Faults leftFaults = new Faults();
        Faults rightFaults = new Faults();
        leftFront.getFaults(leftFaults);
        rightFront.getFaults(rightFaults);
        if(leftFaults.hasAnyFault()){
            DriverStation.reportWarning(leftFaults.toString(), false);
        }
        if(rightFaults.hasAnyFault()){
            DriverStation.reportWarning(rightFaults.toString(), false);
        }
    }

    public void drive(double forward, double turn){
        drive.arcadeDrive(forward, turn);
        SmartDashboard.putNumber("Drive Forward", forward);
        SmartDashboard.putNumber("Turn", turn);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        telemetry();
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

