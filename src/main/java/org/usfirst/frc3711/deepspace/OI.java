// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3711.deepspace;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.InstantCommand;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInLayouts;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3711.deepspace.commands.*;
import org.usfirst.frc3711.deepspace.commands.sequences.*;
import org.usfirst.frc3711.deepspace.commands.util.Commands;
import org.usfirst.frc3711.deepspace.subsystems.TalonSubsystem;

import java.util.Arrays;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
@SuppressWarnings("WeakerAccess")
public class OI {
  //// CREATING BUTTONS
  // One type of button is a joystick button which is any button on a joystick.
  // You create one by telling it which joystick it's on and which button
  // number it is.
  // Joystick stick = new Joystick(port);
  // Button button = new JoystickButton(stick, buttonNumber);

  // There are a few additional built in buttons you can use. Additionally,
  // by subclassing Button you can create custom triggers and bind those to
  // commands the same as any other Button.

  //// TRIGGERING COMMANDS WITH BUTTONS
  // Once you have a button, it's trivial to bind it to a button in one of
  // three ways:

  // Start the command when the button is pressed and let it run the command
  // until it is finished as determined by it's isFinished method.
  // button.whenPressed(new ExampleCommand());

  // Run the command while the button is being held down and interrupt it once
  // the button is released.
  // button.whileHeld(new ExampleCommand());

  // Start the command when the button is released  and let it run the command
  // until it is finished as determined by it's isFinished method.
  // button.whenReleased(new ExampleCommand());


  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  public final Joystick joystick1;

  final JoystickButton elevator;
//  final JoystickButton arm;
//  final JoystickButton wrist;

  final JoystickButton intakeInhale;
  final JoystickButton intakeExhale;
  final JoystickButton fickleFingerHook;
  final JoystickButton fickleFingerEject;

  final JoystickButton stow;

  final JoystickButton elevatorUp;
  final JoystickButton elevatorDown;

  final JoystickButton doglegDownButton;
  final JoystickButton rearJackDownButton;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  public OI() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    joystick1 = new Joystick(0);

    stow = new JoystickButton(joystick1, 7);

    elevator = new JoystickButton(joystick1, 5);
//    arm = new JoystickButton(joystick1, 3);
//    wrist = new JoystickButton(joystick1, 4);


    intakeInhale = new JoystickButton(joystick1, 1);
    intakeExhale = new JoystickButton(joystick1,2);

    fickleFingerHook = new JoystickButton(joystick1, 5);
    fickleFingerEject = new JoystickButton(joystick1,3);

    elevatorUp = new JoystickButton(joystick1, 11);
    elevatorDown = new JoystickButton(joystick1, 12);

    rearJackDownButton = new JoystickButton(joystick1,4);
    doglegDownButton = new JoystickButton(joystick1,6);





//        MotionMagicSetpoint top = new MotionMagicSetpoint(Robot.elevator);
//        top.setSetpoint(7000);
//        elevatorUp.whenPressed(top);
//
//        MotionMagicSetpoint home = new MotionMagicSetpoint(Robot.elevator);
//        home.setSetpoint(1000);
//        elevatorDown.whenPressed(home);


    elevator.whileHeld(new ManualTalonControl(Robot.elevator));
//    arm.whileHeld(new ManualTalonControl(Robot.arm));
//    wrist.whileHeld(new ManualTalonControl(Robot.wrist));

    intakeInhale.whileHeld(IntakeCommands.eject());
    intakeExhale.whileHeld(IntakeCommands.intake());

    fickleFingerHook.whileHeld(FickleFingerCommands.hookingDirectionCommand());
    fickleFingerEject.whileHeld(FickleFingerCommands.ejectingDirectionCommand());


    SmartDashboard.putData(new InstantCommand("Disable all", Robot::disableAll));


    // SmartDashboard Buttons
    SmartDashboard.putData("Drive with Joystick", new DrivewithJoystick());

    var tab = Shuffleboard.getTab("Poses");
    var subsys = tab.getLayout("Subsystems", BuiltInLayouts.kList);
    subsys.add(Robot.arm);
    subsys.add(Robot.wrist);
    subsys.add(Robot.elevator);

    tab.add(new RobotPoser(RobotPose.STOW));
    tab.add(new RestingPose());
    tab.add(new Resting2());
    tab.add(new StagingPose());
    tab.add(new HatchFuel0());
    tab.add(new HatchPanel0());
    tab.add(new LoadingStationFuel());
    tab.add(new LoadingStationFuelToHome());
    tab.add(new HatchFuel1());
    tab.add(new Level1ToHome());
    tab.add(new HatchPanel1());


    // tab.add(new CommandSequences.PingPong());

    tab.add(new InstantCommand("Zero Encoders", () -> {

      for (TalonSubsystem s : Arrays.asList(Robot.elevator, Robot.wrist, Robot.arm)) {
        var t = s.talon;
        t.setSelectedSensorPosition(0);
        t.getSensorCollection().setQuadraturePosition(0, 50);
      }
    }));
    tab.add(Commands.disableAll());


    stow.whenPressed(new RobotPoser(RobotPose.STOW));


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  public Joystick getJoystick1() {
    return joystick1;
  }


  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

